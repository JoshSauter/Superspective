8/6/2022 SFSBen
- Video resolution settings are a must
- Cathedral Tutorial Elevator is a little bumpy on low FPS
- Had trouble getting started in CathedralTutorial (didn't know you could press screens)
- Keep the numbers that allow multiple solutions
- Too long, too difficult
- Cathedral: current value not immediately clear vs target value
- Black room: don't let the projector controls 

I came across an interesting problem with Unity physics: OnTriggerEnter/OnTriggerExit _do not_ trigger if an object is teleported (or created) into or out of a trigger zone, respectively. My game involves a lot of teleporting the player around to achieve surrealistic environments, and I really want that to trigger the Enter and Exit physics event functions.

So I wrote a `BetterTrigger` class to accomplish this task and use that instead for this purpose:
```
// A trigger which will actually trigger OnTriggerEnter/Exit when an object is teleported into or out of it
[RequireComponent(typeof(Collider))]
public class BetterTrigger : MonoBehaviour {
    private Collider trigger;
    private HashSet<Collider> collidersInZone = new HashSet<Collider>();

    public List<BetterTriggers> listeners = new List<BetterTriggers>();

    // Start is called before the first frame update
    void Start() {
        trigger = GetComponent<Collider>();

        if (listeners == null || listeners.Count == 0) {
            listeners = GetComponents<MonoBehaviour>().OfType<BetterTriggers>().ToList();
        }
    }

    private void FixedUpdate() {
        // Check the positions of each collider we're tracking to see if we need to trigger OnBetterTriggerExit
        
        // Don't remove elements from the collection while we are iterating over it, remove them in bulk afterwards
        HashSet<Collider> collidersToRemove = new HashSet<Collider>();
        foreach (var c in collidersInZone) {
            if (!IsInTriggerZone(c)) {
                collidersToRemove.Add(c);
            }
        }

        // Remove any colliders no longer in contact w/ the trigger zone, and trigger OnBetterTriggerExit for each
        collidersInZone.RemoveWhere(collidersToRemove.Contains);
        foreach (var colliderRemoved in collidersToRemove) {
            foreach (var listener in listeners) {
                listener.OnBetterTriggerExit(colliderRemoved);
            }
        }
    }

    private void OnTriggerStay(Collider other) {
        if (IsInTriggerZone(other)) {
            // Whatever is triggering OnTriggerStay is ACTUALLY still colliding with us
            
            if (!collidersInZone.Contains(other)) {
                // We aren't tracking this object yet, so add it to our list and trigger OnBetterTriggerEnter for it
                AddCollider(other);
            }
            // I don't want to have OnBetterTriggerEnter on the same physics frame as an OnBetterTriggerStay, but if you do you can remove the else here:
            else {
                // We're already aware of this object, and it's actually in the zone, so trigger OnBetterTriggerStay for it
                foreach (var listener in listeners) {
                    listener.OnBetterTriggerStay(other);
                }
            }
        }
        else if (collidersInZone.Contains(other)) {
            // Unity dun fooled us, this collider isn't actually in contact with us still! Remove it and trigger OnBetterTriggerExit
            RemoveCollider(other);
        }
    }

    private void RemoveCollider(Collider c) {
        collidersInZone.Remove(c);
        foreach (var listener in listeners) {
            listener.OnBetterTriggerExit(c);
        }
    }

    void AddCollider(Collider c) {
        collidersInZone.Add(c);
        foreach (var listener in listeners) {
            listener.OnBetterTriggerEnter(c);
        }
    }

    bool IsInTriggerZone(Collider c) {
        // This function isn't typically used for this purpose (hence the two throwaway out arguments),
        // but it's the best I could find that did a proper check of whether two Colliders would be in contact with each other
        return Physics.ComputePenetration(
            trigger, transform.position, transform.rotation, 
            c, c.transform.position, c.transform.rotation,
            out _, out _);
    }
}

// Anything that wants better triggers simply inherits this interface and implements the methods as though they were Unity Event Functions
public interface BetterTriggers {
    void OnBetterTriggerEnter(Collider c);
    void OnBetterTriggerExit(Collider c);
    void OnBetterTriggerStay(Collider c);
}
```
Example usage:
```
[RequireComponent(typeof(BetterTrigger))]
public class GrowShrinkTransitionTrigger : MonoBehaviour, BetterTriggers {
    public void OnBetterTriggerEnter(Collider other) {
        // Actually gets called when objects are teleported into a trigger zone
        ...
    }
    public void OnBetterTriggerExit(Collider other) {
        // Actually gets called when objects are teleported out of a trigger zone
        ...
    }
    public void OnBetterTriggerStay(Collider other) {
        // Only gets called if the other object is ACTUALLY still in the trigger zone
        ...
    }
}
```

I don't know how performant it is, and there might be a more elegant solution out there, but this worked wonders for me as I now have a much more consistent trigger system that works as I expect it to with minimal boilerplate for any class that wants to use it, and I thought I'd share with everyone!